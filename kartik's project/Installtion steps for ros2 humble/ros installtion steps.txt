ros install steps
clipbaord active...

1
locale  # check for UTF-8

sudo apt update && sudo apt install locales
sudo locale-gen en_US en_US.UTF-8
sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
export LANG=en_US.UTF-8

locale  # verify settings

2

>> sudo apt install software-properties-common
>> sudo add-apt-repository universe

3.
>> sudo apt update && sudo apt install curl -y
export ROS_APT_SOURCE_VERSION=$(curl -s https://api.github.com/repos/ros-infrastructure/ros-apt-source/releases/latest | grep -F "tag_name" | awk -F\" '{print $4}')
curl -L -o /tmp/ros2-apt-source.deb "https://github.com/ros-infrastructure/ros-apt-source/releases/download/${ROS_APT_SOURCE_VERSION}/ros2-apt-source_${ROS_APT_SOURCE_VERSION}.$(. /etc/os-release && echo $VERSION_CODENAME)_all.deb" # If using Ubuntu derivates use $UBUNTU_CODENAME
sudo dpkg -i /tmp/ros2-apt-source.deb

4.
>> sudo apt update

5. 
>> sudo apt upgrade

6.
>> sudo apt install ros-humble-desktop

7.source /opt/ros/humble/setup.bash
>> source /opt/ros/humble/setup.bash
>> ros2 run demo_nodes_cpp talker

8. 
>> source /opt/ros/humble/setup.bash
>> ros2 run demo_nodes_py listener


9.  Source the setup files
>> source /opt/ros/humble/setup.bash

10. auto start source
>> echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc

11. test environment variables
>> printenv | grep -i ROS
ROS_VERSION=2
ROS_PYTHON_VERSION=3
ROS_DISTRO=humble 

12.  Install turtlesim
>> sudo apt update
>> sudo apt install ros-humble-turtlesim

>> ros2 pkg executables turtlesim
turtlesim draw_square
turtlesim mimic
turtlesim turtle_teleop_key
turtlesim turtlesim_node

13. Start turtlesim

>> ros2 run turtlesim turtlesim_node

14. use turtlesim

>>  Use turtlesim

Note:
You can see the nodes, and their associated topics, services, and actions, using the list subcommands of the respective commands:
ros2 node list
ros2 topic list
ros2 service list
ros2 action list

15 Install rqt

Open a new terminal to install rqt and its plugins:

sudo apt update
sudo apt install '~nros-humble-rqt*'

16 rviz installattion (19-09-2025)

1. Make sure your system is updated
>> sudo apt update && sudo apt upgrade -y
2. Install rviz2
>> sudo apt install ros-humble-rviz2
3. Source your ROS 2 setup
>> source /opt/ros/humble/setup.bash
4. Run turtlesim
Open a terminal and start turtlesim:
>> ros2 run turtlesim turtlesim_node
5. Run teleop (optional, to move the turtle)
In another terminal:
>> ros2 run turtlesim turtle_teleop_key
6.
>> rviz2

17. How to install the micro-ROS agent in ROS 2 Humble

1.Update your system

>> sudo apt update

2.Install dependencies
>> sudo apt install python3-pip

3.Install micro-ROS agent
>> sudo apt install ros-humble-micro-ros-agent

sudo apt update && sudo apt install curl gnupg lsb-release
sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | \
  sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null

---------------------------------------------------------------

used below steps for micro_ros_agent packages..
# 1. Clean old ROS sources and keys (optional but recommended)
sudo rm -f /etc/apt/sources.list.d/ros2.list /etc/apt/sources.list.d/ros-latest.list
sudo rm -f /usr/share/keyrings/ros-archive-keyring.gpg
sudo rm -f /etc/apt/trusted.gpg.d/ros*

# 2. Add ROS 2 repository and keys
sudo mkdir -p /etc/apt/keyrings
curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key | sudo tee /etc/apt/keyrings/ros-archive-keyring.gpg > /dev/null

echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" \
  | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null

sudo apt update

# 3. Install ROS 2 Humble Desktop (or base)
sudo apt install -y ros-humble-desktop

# 4. Install build and micro-ROS Agent dependencies
sudo apt install -y \
  build-essential cmake git python3-colcon-common-extensions python3-pip python3-rosdep \
  python3-rosinstall-generator python3-vcstool python3-argcomplete libasio-dev libtinyxml2-dev libssl-dev wget

# 5. Initialize rosdep if first time
sudo rosdep init || true
rosdep update

# 6. Setup workspace
mkdir -p ~/microros_ws/src
cd ~/microros_ws

# 7. Clone micro-ROS Agent source
git clone https://github.com/micro-ROS/micro_ros_agent.git src/micro_ros_agent

# 8. Install dependencies for source packages
rosdep install --from-paths src --ignore-src -r -y

# 9. Build workspace
colcon build --symlink-install

# 10. Source environment
source install/setup.bash
source /opt/ros/humble/setup.bash

# Now you can run the micro-ROS Agent:
# e.g.
# ros2 run micro_ros_agent micro_ros_agent serial --dev /dev/ttyUSB0

CH340 USB-to-Serial Setup on Ubuntu 22.04.5 (VirtualBox)

===============================
Step-by-Step Commands That Worked
===============================

1. Check if the USB Device is Detected:
---------------------------------------
lsusb

Expected Output:
ID 1a86:7523 QinHeng Electronics CH340 serial converter

2. Check Kernel Logs for USB Serial Driver:
-------------------------------------------
sudo dmesg | grep -i ch34

Look for:
ch341-uart converter now attached to ttyUSB0

3. Fix Conflict: Remove brltty (causes disconnection issues with CH340)
-----------------------------------------------------------------------
sudo apt remove brltty

Then reboot:
sudo reboot

4. Check if /dev/ttyUSB0 Exists:
--------------------------------
ls /dev/ttyUSB*

Expected Output:
/dev/ttyUSB0

5. (Optional) Add Current User to 'dialout' Group:
--------------------------------------------------
sudo usermod -aG dialout $USER

Then log out and log back in.
Verify with:
groups $USER

6. (Optional) Install and Use 'screen' for Serial Communication:
----------------------------------------------------------------
sudo apt install screen

Connect at 9600 baud (adjust if needed):
screen /dev/ttyUSB0 9600

To exit 'screen':
Ctrl+A, then K, then Y

7. (Optional) Install and Use 'minicom' for Serial Testing:
-----------------------------------------------------------
sudo apt install minicom

Run setup:
sudo minicom -s

Set Serial Device to: /dev/ttyUSB0  
Set Baud Rate: as needed (e.g., 9600)

Start communication.

===============================
Summary
===============================

- CH340 USB-Serial detected successfully
- brltty was causing conflict → removed
- /dev/ttyUSB0 is now accessible
- Use screen or minicom for serial testing

#testing commands for led_control

>> ros2 topic echo /led_control
>> ros2 run micro_ros_agent micro_ros_agent serial --dev /dev/ttyUSB0
>> ros2 topic pub /led_control std_msgs/msg/Int32 "data: 0"

ls /dev/ttyUSB*
source install/setup.bash
source /opt/ros/humble/setup.bash
ros2 run micro_ros_agent micro_ros_agent serial --dev /dev/ttyUSB0

ros2 topic pub /led_control std_msgs/msg/Int32 "{data: 1}" --once
ros2 topic pub /led_control std_msgs/msg/Int32 "{data: 0}" --once
ros2 topic pub /led_control std_msgs/msg/Int32 "{data: 1}"
ros2 topic echo /led_control


===============================
Step-by-Step Commands That Worked for gezebo installattion
===============================

sudo apt update
sudo apt upgrade -y

sudo apt install -y gazebo

gazebo

3. Install ROS 2 Humble integration packages
sudo apt install -y ros-humble-gazebo-ros-pkgs ros-humble-gazebo-ros




