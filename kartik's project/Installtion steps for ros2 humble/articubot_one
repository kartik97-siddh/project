https://github.com/joshnewans/articubot_one.git
https://github.com/joshnewans/articubot_one/

1. Setup Your Workspace

Create a ROS 2 workspace (if you don‚Äôt already have one):

mkdir -p ~/ros2_ws/src
cd ~/ros2_ws/src

2. Clone the Repository

Clone the articubot_one package into src/:

git clone https://github.com/joshnewans/articubot_one.git

Now your workspace looks like:

ros2_ws/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îî‚îÄ‚îÄ articubot_one/


3. Install Dependencies

From the root of your workspace (~/ros2_ws):

cd ~/ros2_ws
rosdep update
rosdep install --from-paths src --ignore-src -r -y

4. Build the Workspace

Build everything using colcon:

cd ~/ros2_ws
colcon build --symlink-install

5. Source the Setup File

Each time you open a new terminal, source your workspace:

source ~/ros2_ws/install/setup.bash

üëâ To make it permanent, add this to your ~/.bashrc:

echo "source ~/ros2_ws/install/setup.bash" >> ~/.bashrc


Then reload:

source ~/.bashrc

sudo apt update
sudo apt install ros-humble-xacro

cd ~/ros2_ws
colcon build --symlink-install
source install/setup.bash

ros2 launch articubot_one launch_sim.launch.py

sudo apt update
sudo apt install ros-humble-twist-mux

sudo apt update
sudo apt install ros-humble-ros2-control ros-humble-ros2-controllers


cd ~/ros2_ws
colcon build --symlink-install
source install/setup.bash
sudo apt-get install ros-humble-teleop-twist-keyboard

testing commmad..


>> kartik@sidd:~/ros2_ws$ ros2 launch articubot_one launch_sim.launch.py
>> kartik@sidd:~/ros2_ws$ ros2 launch articubot_one joystick.launch.py

----------------------------------------------------------------
----------------------------------------------------
--------------------------------------------------------

working 

Articubot One - Full Setup and Run Steps
________________________________________
1Ô∏è‚É£    Clone repository
mkdir -p ~/ros2_ws/src
cd ~/ros2_ws/src
git clone https://github.com/joshnewans/articubot_one.git
2Ô∏è‚É£   Install dependencies
cd ~/ros2_ws
rosdep install --from-paths src --ignore-src -r -y
sudo apt install ros-humble-ros2-control ros-humble-ros2-controllers ros-humble-gazebo-ros2-control ros-humble-teleop-twist-keyboard
3Ô∏è‚É£ Build workspace
colcon build --symlink-install
source install/setup.bash
(Optional: add to ~/.bashrc)
echo "source ~/ros2_ws/install/setup.bash" >> ~/.bashrc
4Ô∏è‚É£ Check hardware interfaces
ros2 control list_hardware_interfaces
Should show:
left_wheel_joint/velocity [available] [claimed]
right_wheel_joint/velocity [available] [claimed]
5Ô∏è‚É£ Fix diff_cont controller (if needed)
Edit my_controllers.yaml in articubot_one/config/:
diff_cont:
  type: diff_drive_controller/DiffDriveController
  ros__parameters:
    left_wheel_names: ["left_wheel_joint"]
    right_wheel_names: ["right_wheel_joint"]
    wheel_separation: 0.15
    wheel_radius: 0.033
    cmd_vel_timeout: 0.25
    publish_rate: 50
    use_stamped_vel: false

joint_broad:
  type: joint_state_broadcaster/JointStateBroadcaster
  ros__parameters: {}
Then rebuild:
colcon build --symlink-install
source install/setup.bash
6Ô∏è‚É£ Launch Gazebo simulation
ros2 launch articubot_one launch_sim.launch.py
Check controllers:
ros2 control list_controllers -v
7Ô∏è‚É£ Run teleop (keyboard)
ros2 run teleop_twist_keyboard teleop_twist_keyboard
Use keys w/a/s/d/x to move, q/z/e/c to adjust speeds, Ctrl+C to stop.
8Ô∏è‚É£ Optional
‚Ä¢	RViz visualization:
ros2 launch articubot_one view_robot.launch.py
‚Ä¢	Joystick teleop:
ros2 launch articubot_one joystick.launch.py
________________________________________
End of setup and run steps.

--------------------------------------------------------------------
for 1-10-2025

ROS2 Humble: Map Building and RViz Visualization Steps

---

## 1Ô∏è‚É£ Install necessary packages

```
sudo apt install ros-humble-slam-toolbox ros-humble-nav2-bringup
```

## 2Ô∏è‚É£ Launch robot in Gazebo

```
ros2 launch articubot_one launch_sim.launch.py
```

## 3Ô∏è‚É£ Launch SLAM node

```
ros2 launch slam_toolbox online_async_launch.py use_sim_time:=true
```

* Builds map in real-time as robot moves
* `use_sim_time:=true` ensures sync with Gazebo simulation

## 4Ô∏è‚É£ Run teleop to drive robot and build the map

```
ros2 run teleop_twist_keyboard teleop_twist_keyboard
```

* Move robot around the environment
* SLAM builds map on the fly

## 5Ô∏è‚É£ Save the map (after mapping)

```
ros2 run nav2_map_server map_saver_cli -f ~/ros2_ws/src/articubot_one/maps/my_map
```

* Saves `my_map.yaml` and `my_map.pgm`

## 6Ô∏è‚É£ Load the map in RViz

### Option 1: Start map server + RViz

```
ros2 launch nav2_bringup bringup_launch.py map:=$HOME/ros2_ws/src/articubot_one/maps/my_map.yaml use_sim_time:=true
```

### Option 2: Open RViz manually

```
rviz2
```

* Add **Map** display ‚Üí topic `/map`
* Add **TF** display ‚Üí see robot pose

## ‚úÖ Typical workflow

1. Terminal 1 ‚Üí Gazebo robot:

```
ros2 launch articubot_one launch_sim.launch.py
```

2. Terminal 2 ‚Üí SLAM node:

```
ros2 launch slam_toolbox online_async_launch.py use_sim_time:=true
```

3. Terminal 3 ‚Üí Teleop:

```
ros2 run teleop_twist_keyboard teleop_twist_keyboard
```

4. Terminal 4 ‚Üí RViz visualization (optional):

```
r
```
